/**
 * cdc.cookie.informer.js
 * $Revision: 1.3 $
 *
 * cookie informer: displays a localized banner informing users that cisco.com uses cookies
 * 
 * step 1:
 *    /web/fw/c/masterbrand_frag/_cisco_informer.css
 *    /web/fw/j/masterbrand_frag/_cisco_informer.js
 *       - check if the client has already acknowledged the banner
 *       - check if client has any stored banner data from a previous visit
 *       - none of the above, make call to userInfoDispatcher.js 
 *         to obtain client location via Akamai response header
 *       - if "country_code" retrieved, load step 2 via includer.js
 * step 2:
 *    /etc/designs/cdc/fw/j/cdc.cookie.informer.js
 *       - this should only run once
 *       - test current location against master list of required countries
 *       - localize banner content if RB generated variable are found
 *       - display banner
 *       - set banner content & client location to local storage for next visit
 * 
 * dependencies:
 *    /web/fw/co/i/s.gif
 *       - delivers the akamai custom response header: "X-Akamai-Edgescape"
 *       - must remain cors enabled/exposed (currently done with .htaccess)
 *    /etc/designs/cdc/fw/j/userInfoDispatcher.js
 *       - determine client's physical location via akamai response header
 *       - notes: this functionality will be available to the whole framework
 *       -     only works outside the firewall,
 *       -     or if local machine's hosts file forwarded to akamai staging server 
 *    /etc/designs/cdc/fw/co/cookie_informer_countries.js
 *       - master list of which countries currently require cookie usage disclosure
 *    /etc/designs/cdc/fw/j/util_core.js
 *       - fw local storage methods
 *    /etc/designs/cdc/fw/j/cdc.cookie.js
 *       - fw cookie methods
 * 
 * (c) 1992-2013 Cisco Systems, Inc. All rights reserved.
 * Terms and Conditions: http://www.cisco.com/web/siteassets/legal/terms_condition.html
 * 
**/

jQuery(document).ready(function() {

      // 1: check akamai country against master list of required countries
      cdc.cookie.informer.matchCountry = function(country_code){
         // if includer fails to find cookie_informer_countries.js, we just stop.
         var requires_banner = false;
         // TODO: finalize master list location. this will be maintained by non-ids, so we may not want it to be js
         cdc.includer.loadJs("/etc/designs/cdc/fw/co/cookie_informer_countries.js", { callback: function () {

            jQuery(cdc.config.cookieInformer.requiredCountries).each(function () {
               if(country_code === this.toString()){
                  requires_banner = true;
                  var banner_content = cdc.config.cookieInformer.bannerContentDefault;
                  cdc.util.ls.setConfigInfo('cdc_cookie_informed_country', country_code); // store country
                  cdc.cookie.informer.setBannerContent(country_code, banner_content);
                  return false;
               }
            });

            // set storage/cookie if this was not a required country at this time
            // note: this decision was made to avoid running a required country lookup on every single page load.
            //       the concern is, if this country decides to require cookies later, this client will never see the banner.
            if (requires_banner === false){
               cdc.util.ls.setConfigInfo('cdc_cookie_informed', country_code + ' - not required on ' + Date());
               //set cookie, if needed. fallback for legacy browsers
               if (cdc.util.ls.getConfigInfo('cdc_cookie_informed') === false){
                  cdc.cookie.setCookie({
                     cookieName: 'cdc.cookie.informed',
                     cookieValue: country_code + ' - not required on ' + Date()
                  });
               }
            }

         }}); // end includer load

      }

      // 2: localize banner if needed
      cdc.cookie.informer.setBannerContent = function(country_code, banner_content){

         // reset the button attributes
         // it was easier to do this here than have all of the RB's updated during QA round 3,
         // once the decision was made to make the default title blank because we hadn't recieved official "close" translations yet.
         var link_text = banner_content.button_title;
         banner_content.button_title = "";

         // 2.0 & Portals 
         // - localize with content provided by the resource bundles
         // - can also be set manually (example: painted theatre homepages)
         if (cdc.local && cdc.local.wpx.COOKIE_INFORMER_MESSAGE) {
            banner_content.message = cdc.local.wpx.COOKIE_INFORMER_MESSAGE;
         }
         if (cdc.local && cdc.local.wpx.COOKIE_INFORMER_BUTTON_TITLE) {
            banner_content.button_title = cdc.local.wpx.COOKIE_INFORMER_BUTTON_TITLE;
            link_text = cdc.local.wpx.COOKIE_INFORMER_BUTTON_TITLE;
         }
         cdc.cookie.informer.setBanner(country_code, banner_content, link_text);
      }

      // 3: display banner and client 'acknowledgement' button
      cdc.cookie.informer.setBanner = function(country_code, banner_content, link_text){
         var banner = '<div id="cookie_informer" class="cookie_informer"><div class="jar"><div id="cookie_icon" class="cookie_icon"></div><div id="cookie_message" class="cookie_message">' + banner_content.message + '</div><div id="cookie_set" class="cookie_set"><a href="javascript:void(0);" title="' + banner_content.button_title + '">' + link_text + '</a></div></div></div>';
         cdc.util.ls.setConfigInfo('cdc_cookie_informed_banner', banner); // store this banner for the next visit
         cdc.cookie.informer.displayBanner(banner);
      }

});



